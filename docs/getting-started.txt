====================================
 Mock - Mocking and Testing Library
====================================

.. highlight:: python

Getting Started
===============

``Mock`` objects can be used for:

* Patching methods
* Recording method calls on objects

::

    >>> from mock import Mock
    >>> 
    >>> real = ProductionClass()
    >>> real.method = Mock()
    >>> 
    >>> real.method(3, 4, 5, key='value')
    >>>
    >>> real.method.assert_called_with(3, 4, 5, key='value')
    >>> real.method.called
    True
    >>> real.method.call_args
    ((3, 4, 5), {'key': 'value'})
    >>>
    >>> mock = Mock()
    >>> mock.something()
    >>> mock.method_calls
    [('something', (), {})]
    >>>
    >>> mock = Mock(methods=['something'])
    >>> mock.something()
    >>> mock.something_else()
    Traceback (most recent call last):
       ...
    AttributeError: object has no attribute 'something_else'

There are various ways of configuring the mock, including setting return values on the mock and its methods. A useful attribute is ``side_effect``. If you set this to a callable then it will be called whenever the mock is called. This allows you to raise an exception or return members of a sequence from repeated calls:

::

    >>> from mock import Mock
    >>> mock = Mock()
    >>> def side_effect():
    ...     raise Exception('Boom!')
    ... 
    >>> mock.side_effect = side_effect
    >>> mock()
    Traceback (most recent call last):
      ...
    Exception: Boom!
    
    >>> results = [1, 2, 3]
    >>> def side_effect():
    ...     mock.return_value = results.pop()
    ... 
    >>> mock.side_effect = side_effect
    >>> mock(), mock(), mock()
    (3, 2, 1)

``sentinel`` is a useful object for providing unique objects in your tests:

::

    >>> from mock import sentinel
    >>> real = ProductionClass()
    >>> real.method = Mock()
    >>> 
    >>> real.method.return_value = sentinel.ReturnValue
    >>> real.method()
    <SentinelObject "ReturnValue">

There are also decorators for doing module and class level patching. As modules and classes are effectively globals any patching has to be undone (or it persists into other tests). These decorators do the unpatching for you, making it easier to test with module and class level patching. 

The two decorators are 'patch' and 'patch_object'. 'patch' takes a single string, of the form ``package.module.Class.attribute`` to specify the attribute you are patching. It also optionally takes a value that you want the attribute (or class or whatever) to be replaced with. 'patch_object' takes an object and the name of the attribute you would like patched, plus optionally the value to patch it with.


::

    from mock import patch, sentinel
    
    original = SomeClass.attribute
    @patch_object(SomeClass, 'attribute', sentinel.Attribute)
    def test():
        self.assertEquals(SomeClass.attribute, sentinel.Attribute, "class attribute not patched")
    test()
    
    self.assertEquals(SomeClass.attribute, original, "attribute not restored")
    
    
    @patch('Package.Module.attribute', sentinel.Attribute)
    def test():
        # do something
    test()


If you don't want to call the decorated test function yourself, you can add ``apply`` as a decorator on top:

::

    @apply
    @patch('Package.Module', 'attribute', sentinel.Attribute)
    def test():
        # do something


A nice pattern is to actually decorate test methods themselves:

.. raw:: html

    {+coloring}
    
    @patch('Package.Module', 'attribute', sentinel.Attribute)
    def testMethod(self):
        # do something
    {-coloring}
    

If you want to patch with a Mock, you can use ``patch`` with only one argument (or ``patch_object`` with two arguments). The mock will be created for you and passed into the test function / method:

.. raw:: html

    {+coloring}
    
    @patch('Package.Module.Class')
    def testMethod(self, mockClass):
        # do something
    {-coloring}


Mocking Magic Methods
=====================

XXX
    




.. _Michael Foord: http://www.voidspace.org.uk/python/weblog/index.shtml
